apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql-storedb-deployment
  labels:
    app: storedb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storedb
  template:
    metadata:
      labels:
        app: storedb
    spec:
      containers:
      - name: storedb
        image: mcr.microsoft.com/mssql/server:2019-latest
        # resources:
        #   limits:
        #     memory: "128Mi"
        #     cpu: "500m"
        # create errors
        ports:
        - containerPort: 1433
        env:
        - name: SA_PASSWORD
          value: Pa55w0rd2022
        - name: ACCEPT_EULA
          value: "Y"
        - name: MSSQL_PID
          value: "Express"
      #   volumeMounts:
      #     - mountPath: /var/opt/mssql/data
      #       name: mssqldb
      # volumes:
      # - name: mssqldb
      #   persistentVolumeClaim:
      #     claimName: mssql-claim      
---
apiVersion: v1
kind: Service
metadata:
  name: mssql-storedb-service
spec:
  type: ClusterIP
  selector:
    app: storedb
  ports:
  - port: 1433 #Des pods peuvent être sur le même port, ça ne pose pas de problème
    targetPort: 1433
    protocol: TCP
    #name: storedb
---
apiVersion: v1
kind: Service
metadata:
  name: mssql-storedb-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: storedb
  ports:
  - port: 1434 #Tout comme dans Docker Compose, le port externe est 1434 mais interne reste le même 1433 car SQL server utilise uniquement ce port
    targetPort: 1433
    protocol: TCP
